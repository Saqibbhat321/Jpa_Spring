package com.xworkz.xworkmodule.service;


import com.xworkz.xworkmodule.dto.ModuleDto;
import com.xworkz.xworkmodule.entity.ModuleEntity;
import com.xworkz.xworkmodule.repository.ModuleRepo;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;
import java.security.SecureRandom;

@Service
public class ModuleServiceImpl implements ModuleService {

    @Autowired
    private ModuleRepo repo;


    private final BCryptPasswordEncoder encoderPassword = new BCryptPasswordEncoder();


    @Override
    public boolean Validate(ModuleDto dto) {
        ModuleEntity entity = new ModuleEntity();

        boolean valid = false;
        if (dto != null) {

            entity.setName(dto.getName());
            entity.setEmail(dto.getEmail());
            entity.setAlterEmail(dto.getAlterEmail());
            entity.setPhNo(dto.getPhNo());
            entity.setAlterPhNo(dto.getAlterPhNo());
            entity.setLocation(dto.getLocation());
            entity.setAutoGeneratedPassword(generateRandomPassword(8));
            entity.setLogin_count(-1);
            repo.save(entity);

            valid = true;
        }
        return valid;
    }


    @Override
    public String getName(String email, String password) {
        String name = repo.getName(email, password);
        return name;
    }

    @Override
    public Long countName(String name) {
        System.out.println(name);
        Long count = repo.countName(name);
        return count;
    }

    @Override
    public Long countByEmail(String email) {
        Long count = repo.countByEmail(email);
        return count;
    }

    @Override
    public Long countByAltEmail(String altEmail) {
        Long count = repo.countByAltEmail(altEmail);
        return count;
    }

    @Override
    public Long countByPhone(double phone) {
        Long count = repo.countByPhone(phone);
        return count;
    }

    @Override
    public Long countByAltPhone(double altPhone) {
        Long count = repo.countByAltPhone(altPhone);
        return count;
    }


    @Override
    public ModuleDto checkLogin(String email, String password) {

        // get entity by Email--> Entity
        // check entity login_count
        //login_count<0 : First time login: return login_count

        ModuleEntity entity = repo.getEntityByEmail(email);
        System.out.println("check login receives " + entity);
        if (entity != null) {
            if (password.equals(entity.getAutoGeneratedPassword())) {
                ModuleDto moduleDto = new ModuleDto();
                entity.setLogin_count(0);
                repo.onUpdate(entity);
                BeanUtils.copyProperties(entity, moduleDto);
                return moduleDto;
            } else {
                entity.setLogin_count(entity.getLogin_count()+1);
                repo.onUpdate(entity);
                System.out.println("Password does not match");
            }
            if(entity.getLogin_count()>3)
            {
                entity.setLogin_count(0);
                repo.onUpdate(entity);
                System.out.println("Your Account is Locked");
            }

        } else {
            System.out.println("Entity not found for email " + email);
        }
        return null;
    }

    @Override
    public ModuleEntity updatePassword(String email, String autogeratedpassword, String newPassword, String
            confirmPassword) {
        ModuleEntity entity = repo.findByEmail(email);
//        System.out.println("what we get from repo is====3 " + entity);
        if (entity != null) {
            if (autogeratedpassword.equalsIgnoreCase(entity.getAutoGeneratedPassword()) && newPassword.equals(confirmPassword)) {
                entity.setAutoGeneratedPassword(encoderPassword.encode(newPassword));
                System.out.println(entity.getAutoGeneratedPassword());
                entity.setLogin_count(0);
                repo.onUpdate(entity);
            }
        }
        return entity;

    }

    private String generateRandomPassword(int length) {
        final String chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%&*";
        ModuleDto dto = new ModuleDto();
        SecureRandom random = new SecureRandom();
        StringBuilder password = new StringBuilder();
        for (int i = 0; i < length; i++) {
            int index = random.nextInt(chars.length());
            password.append(chars.charAt(index));
        }

        return password.toString();
    }

}
