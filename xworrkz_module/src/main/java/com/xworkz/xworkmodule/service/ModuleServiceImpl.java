package com.xworkz.xworkmodule.service;


import com.xworkz.xworkmodule.dto.ModuleDto;
import com.xworkz.xworkmodule.entity.ModuleEntity;
import com.xworkz.xworkmodule.repository.ModuleRepo;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;

import javax.mail.*;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import java.security.SecureRandom;
import java.util.Properties;

@Service
public class ModuleServiceImpl implements ModuleService {

    @Autowired
    private ModuleRepo repo;

    @Autowired
    private BCryptPasswordEncoder encoderPassword;


    @Override
    public boolean Validate(ModuleDto dto) {
        ModuleEntity entity = new ModuleEntity();

        boolean valid = false;
        if (dto != null) {

            entity.setName(dto.getName());
            entity.setEmail(dto.getEmail());
            entity.setAlterEmail(dto.getAlterEmail());
            entity.setPhNo(dto.getPhNo());
            entity.setAlterPhNo(dto.getAlterPhNo());
            entity.setLocation(dto.getLocation());
            entity.setAutoGeneratedPassword(encoderPassword.encode(generateRandomPassword(8)));

            entity.setCreatedBy(dto.getName());
            entity.getCreatedDate();
            entity.setUpdatedBy(dto.getName());
            entity.getUpdatedDate();
            entity.setLogin_count(-1);
            repo.save(entity);

            valid = true;
        }
        return valid;
    }


    @Override
    public String getName(String email, String password) {
        String name = repo.getName(email, password);
        return name;
    }

    @Override
    public Long countName(String name) {
        System.out.println(name);
        Long count = repo.countName(name);
        return count;
    }

    @Override
    public Long countByEmail(String email) {
        Long count = repo.countByEmail(email);
        return count;
    }

    @Override
    public Long countByAltEmail(String altEmail) {
        Long count = repo.countByAltEmail(altEmail);
        return count;
    }

    @Override
    public Long countByPhone(double phone) {
        Long count = repo.countByPhone(phone);
        return count;
    }

    @Override
    public Long countByAltPhone(double altPhone) {
        Long count = repo.countByAltPhone(altPhone);
        return count;
    }


//    @Override
//    @Deprecated
//    public ModuleDto checkLogin(String email, String password) {
//
//        // get entity by Email--> Entity
//        // check entity login_count
//        //login_count<0 : First time login: return login_count
//
//        ModuleEntity entity = repo.getEntityByEmail(email);
//        System.out.println("check login receives " + entity);
//        if (entity != null && entity.getLogin_count()<0) {
//            if (password.equals(entity.getAutoGeneratedPassword())) {
//                ModuleDto moduleDto = new ModuleDto();
//                BeanUtils.copyProperties(entity, moduleDto);
//
//                return moduleDto;
//            } else if(password.equals(entity.getAutoGeneratedPassword())){
//                entity.setLogin_count(entity.getLogin_count()+1);
//                repo.onUpdate(entity);
//                System.out.println("Password does not match");
//            }
//            if(entity.getLogin_count()>3)
//            {
////                entity.setLogin_count(0);
//                repo.onUpdate(entity);
//                System.out.println("Your Account is Locked");
//            }
//
//        } else {
//            System.out.println("Entity not found for email " + email);
//        }
//        return null;
//    }

    @Override
    public ModuleEntity updatePassword(String email, String rawPassword, String newPassword, String
            confirmPassword) {
        ModuleEntity entity = repo.findByEmail(email);
//        System.out.println("what we get from repo is====3 " + entity);
        if (entity != null) {
            if (encoderPassword.matches(rawPassword, entity.getAutoGeneratedPassword()) && newPassword.equals(confirmPassword)) {
                entity.setAutoGeneratedPassword(encoderPassword.encode(newPassword));
                System.out.println(entity.getAutoGeneratedPassword());

                entity.setLogin_count(0);
                repo.onUpdate(entity);
                return entity;
            }

        }
        return null;

    }

    @Override
    public boolean UpdateDetailsByName(ModuleDto dto) {
        ModuleEntity entity = new ModuleEntity();
        if (dto != null) {
            entity.setName(dto.getName());
            entity.setEmail(dto.getEmail());
            entity.setPhNo(dto.getPhNo());
            entity.setAlterEmail(dto.getAlterEmail());
            entity.setAlterPhNo(dto.getAlterPhNo());
            entity.setLocation(dto.getLocation());
            return repo.updateDetailsByName(entity);

        }
        return false;
    }


    private String generateRandomPassword(int length) {
        final String chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%&*";
//        ModuleDto dto = new ModuleDto();
        SecureRandom random = new SecureRandom();
        StringBuilder password = new StringBuilder();
        for (int i = 0; i < length; i++) {
            int index = random.nextInt(chars.length());
            password.append(chars.charAt(index));
        }
        System.out.println("Encrypted password for updating password " + password.toString());

        return password.toString();
    }

    @Override
    public ModuleEntity checkLogin(String email, String password) {

        ModuleEntity entity = repo.getEntityByEmail(email);
        boolean passwordMatched = this.encoderPassword.matches(password, entity.getAutoGeneratedPassword());
//                                                                           ModuleDto dto = new ModuleDto();
        if (entity.getLogin_count() < 0 && passwordMatched) {
            return entity;
        }
        if (entity.getLogin_count() > 3 && passwordMatched) {
            System.out.println("account lokced");
            entity.setAccountLocked(true);

            return entity;
        }
        if (passwordMatched) {
//                                                                      BeanUtils.copyProperties(entity, dto);
            System.out.println("correct password for " + entity.getName());
            entity.setLogin_count(0);
        } else {
            System.out.println("pass word incorrect");
            entity.setLogin_count(entity.getLogin_count() + 1);
        }
        repo.onUpdate(entity);

        return entity;


    }

    @Override
    public boolean saveEmail(String email, String password) {

        final String username = "chethan.chiru.rc@gmail.com";
        final String userPassword = "btlw qavi xork qwqd";


        Properties prop = new Properties();
        prop.put("mail.smtp.host", "smtp.gmail.com");
        prop.put("mail.smtp.port", "587");
        prop.put("mail.smtp.auth", "true");
        prop.put("mail.smtp.starttls.enable", "true");
        prop.put("mail.smtp.ssl.trust", "smtp.gmail.com");
        prop.put("mail.debug", "true");

        Session session = Session.getInstance(prop,
                new javax.mail.Authenticator() {
                    protected PasswordAuthentication getPasswordAuthentication() {
                        return new PasswordAuthentication(username, userPassword);
                    }
                });

        try {
            Message message = new MimeMessage(session);
            message.setFrom(new InternetAddress(username));
            message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(email));
            message.setSubject("Your password");
            message.setText("your password" + password);
            Transport.send(message);
            System.out.println("Done");

        } catch (MessagingException e) {
            e.printStackTrace();
        }

        return true;
    }

    @Override
    public boolean resetPassword(String email, String newPassword) {
        try {
            String encryptedNewPassword = encoderPassword.encode(newPassword);
            return repo.resetPasswordAndLoginCount(email, encryptedNewPassword);
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }

    }
}
